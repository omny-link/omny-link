// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package org.activiti.spring.rest.model;

import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.activiti.spring.rest.model.FormProperty;
import org.activiti.spring.rest.model.FormPropertyDataOnDemand;
import org.springframework.stereotype.Component;

privileged aspect FormPropertyDataOnDemand_Roo_DataOnDemand {
    
    declare @type: FormPropertyDataOnDemand: @Component;
    
    private Random FormPropertyDataOnDemand.rnd = new SecureRandom();
    
    private List<FormProperty> FormPropertyDataOnDemand.data;
    
    public FormProperty FormPropertyDataOnDemand.getNewTransientFormProperty(int index) {
        FormProperty obj = new FormProperty();
        setDatePattern(obj, index);
        setEnumValues(obj, index);
        setId(obj, index);
        setName(obj, index);
        setReadable(obj, index);
        setRequired(obj, index);
        setType(obj, index);
        setWriteable(obj, index);
        return obj;
    }
    
    public void FormPropertyDataOnDemand.setDatePattern(FormProperty obj, int index) {
        String datePattern = "datePattern_" + index;
        obj.setDatePattern(datePattern);
    }
    
    public void FormPropertyDataOnDemand.setEnumValues(FormProperty obj, int index) {
        String enumValues = "enumValues_" + index;
        obj.setEnumValues(enumValues);
    }
    
    public void FormPropertyDataOnDemand.setId(FormProperty obj, int index) {
        String id = "id_" + index;
        obj.setId(id);
    }
    
    public void FormPropertyDataOnDemand.setName(FormProperty obj, int index) {
        String name = "name_" + index;
        obj.setName(name);
    }
    
    public void FormPropertyDataOnDemand.setReadable(FormProperty obj, int index) {
        Boolean readable = Boolean.TRUE;
        obj.setReadable(readable);
    }
    
    public void FormPropertyDataOnDemand.setRequired(FormProperty obj, int index) {
        Boolean required = Boolean.TRUE;
        obj.setRequired(required);
    }
    
    public void FormPropertyDataOnDemand.setType(FormProperty obj, int index) {
        String type = "type_" + index;
        obj.setType(type);
    }
    
    public void FormPropertyDataOnDemand.setWriteable(FormProperty obj, int index) {
        Boolean writeable = Boolean.TRUE;
        obj.setWriteable(writeable);
    }
    
    public FormProperty FormPropertyDataOnDemand.getSpecificFormProperty(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        FormProperty obj = data.get(index);
        Long id = obj.getId_();
        return FormProperty.findFormProperty(id);
    }
    
    public FormProperty FormPropertyDataOnDemand.getRandomFormProperty() {
        init();
        FormProperty obj = data.get(rnd.nextInt(data.size()));
        Long id = obj.getId_();
        return FormProperty.findFormProperty(id);
    }
    
    public boolean FormPropertyDataOnDemand.modifyFormProperty(FormProperty obj) {
        return false;
    }
    
    public void FormPropertyDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = FormProperty.findFormPropertyEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'FormProperty' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<FormProperty>();
        for (int i = 0; i < 10; i++) {
            FormProperty obj = getNewTransientFormProperty(i);
            try {
                obj.persist();
            } catch (final ConstraintViolationException e) {
                final StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    final ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getRootBean().getClass().getName()).append(".").append(cv.getPropertyPath()).append(": ").append(cv.getMessage()).append(" (invalid value = ").append(cv.getInvalidValue()).append(")").append("]");
                }
                throw new IllegalStateException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
