// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package org.activiti.spring.rest.model;

import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.activiti.engine.ProcessEngine;
import org.activiti.spring.rest.model.ProcessInstance;
import org.activiti.spring.rest.model.ProcessInstanceDataOnDemand;
import org.springframework.stereotype.Component;

privileged aspect ProcessInstanceDataOnDemand_Roo_DataOnDemand {
    
    declare @type: ProcessInstanceDataOnDemand: @Component;
    
    private Random ProcessInstanceDataOnDemand.rnd = new SecureRandom();
    
    private List<ProcessInstance> ProcessInstanceDataOnDemand.data;
    
    public ProcessInstance ProcessInstanceDataOnDemand.getNewTransientProcessInstance(int index) {
        ProcessInstance obj = new ProcessInstance();
        setActivityId(obj, index);
        setBusinessKey(obj, index);
        setEnded(obj, index);
        setId(obj, index);
        setParentId(obj, index);
        setProcessDefinitionId(obj, index);
        setProcessEngine(obj, index);
        setProcessInstanceId(obj, index);
        setSuspended(obj, index);
        return obj;
    }
    
    public void ProcessInstanceDataOnDemand.setActivityId(ProcessInstance obj, int index) {
        String activityId = "activityId_" + index;
        obj.setActivityId(activityId);
    }
    
    public void ProcessInstanceDataOnDemand.setBusinessKey(ProcessInstance obj, int index) {
        String businessKey = "businessKey_" + index;
        obj.setBusinessKey(businessKey);
    }
    
    public void ProcessInstanceDataOnDemand.setEnded(ProcessInstance obj, int index) {
        Boolean ended = Boolean.TRUE;
        obj.setEnded(ended);
    }
    
    public void ProcessInstanceDataOnDemand.setId(ProcessInstance obj, int index) {
        String id = "id_" + index;
        obj.setId(id);
    }
    
    public void ProcessInstanceDataOnDemand.setParentId(ProcessInstance obj, int index) {
        String parentId = "parentId_" + index;
        obj.setParentId(parentId);
    }
    
    public void ProcessInstanceDataOnDemand.setProcessDefinitionId(ProcessInstance obj, int index) {
        String processDefinitionId = "processDefinitionId_" + index;
        obj.setProcessDefinitionId(processDefinitionId);
    }
    
    public void ProcessInstanceDataOnDemand.setProcessEngine(ProcessInstance obj, int index) {
        ProcessEngine processEngine = null;
        obj.setProcessEngine(processEngine);
    }
    
    public void ProcessInstanceDataOnDemand.setProcessInstanceId(ProcessInstance obj, int index) {
        String processInstanceId = "processInstanceId_" + index;
        obj.setProcessInstanceId(processInstanceId);
    }
    
    public void ProcessInstanceDataOnDemand.setSuspended(ProcessInstance obj, int index) {
        Boolean suspended = Boolean.TRUE;
        obj.setSuspended(suspended);
    }
    
    public ProcessInstance ProcessInstanceDataOnDemand.getSpecificProcessInstance(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        ProcessInstance obj = data.get(index);
        Long id = obj.getId_();
        return ProcessInstance.findProcessInstance(id);
    }
    
    public ProcessInstance ProcessInstanceDataOnDemand.getRandomProcessInstance() {
        init();
        ProcessInstance obj = data.get(rnd.nextInt(data.size()));
        Long id = obj.getId_();
        return ProcessInstance.findProcessInstance(id);
    }
    
    public boolean ProcessInstanceDataOnDemand.modifyProcessInstance(ProcessInstance obj) {
        return false;
    }
    
    public void ProcessInstanceDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = ProcessInstance.findProcessInstanceEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'ProcessInstance' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<ProcessInstance>();
        for (int i = 0; i < 10; i++) {
            ProcessInstance obj = getNewTransientProcessInstance(i);
            try {
                obj.persist();
            } catch (final ConstraintViolationException e) {
                final StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    final ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getRootBean().getClass().getName()).append(".").append(cv.getPropertyPath()).append(": ").append(cv.getMessage()).append(" (invalid value = ").append(cv.getInvalidValue()).append(")").append("]");
                }
                throw new IllegalStateException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
