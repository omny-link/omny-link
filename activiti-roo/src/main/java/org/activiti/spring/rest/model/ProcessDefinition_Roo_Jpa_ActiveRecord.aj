// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package org.activiti.spring.rest.model;

import java.util.List;
import javax.persistence.EntityManager;
import javax.persistence.PersistenceContext;
import org.activiti.spring.rest.model.ProcessDefinition;
import org.springframework.transaction.annotation.Transactional;

privileged aspect ProcessDefinition_Roo_Jpa_ActiveRecord {
    
    @PersistenceContext
    transient EntityManager ProcessDefinition.entityManager;
    
    public static final List<String> ProcessDefinition.fieldNames4OrderClauseFilter = java.util.Arrays.asList("JSON_FIELDS", "processEngine", "id", "name", "category", "description", "version", "resourceName", "deploymentId", "diagramResourceName", "key", "formKey", "formProperties");
    
    public static final EntityManager ProcessDefinition.entityManager() {
        EntityManager em = new ProcessDefinition().entityManager;
        if (em == null) throw new IllegalStateException("Entity manager has not been injected (is the Spring Aspects JAR configured as an AJC/AJDT aspects library?)");
        return em;
    }
    
    public static ProcessDefinition ProcessDefinition.findProcessDefinition(Long id_) {
        if (id_ == null) return null;
        return entityManager().find(ProcessDefinition.class, id_);
    }
    
    @Transactional
    public void ProcessDefinition.persist() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.persist(this);
    }
    
    @Transactional
    public void ProcessDefinition.remove() {
        if (this.entityManager == null) this.entityManager = entityManager();
        if (this.entityManager.contains(this)) {
            this.entityManager.remove(this);
        } else {
            ProcessDefinition attached = ProcessDefinition.findProcessDefinition(this.id_);
            this.entityManager.remove(attached);
        }
    }
    
    @Transactional
    public void ProcessDefinition.flush() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.flush();
    }
    
    @Transactional
    public void ProcessDefinition.clear() {
        if (this.entityManager == null) this.entityManager = entityManager();
        this.entityManager.clear();
    }
    
    @Transactional
    public ProcessDefinition ProcessDefinition.merge() {
        if (this.entityManager == null) this.entityManager = entityManager();
        ProcessDefinition merged = this.entityManager.merge(this);
        this.entityManager.flush();
        return merged;
    }
    
}
