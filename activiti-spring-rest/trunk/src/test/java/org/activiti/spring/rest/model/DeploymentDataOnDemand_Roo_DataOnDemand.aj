// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package org.activiti.spring.rest.model;

import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.activiti.engine.ProcessEngine;
import org.activiti.spring.rest.model.Deployment;
import org.activiti.spring.rest.model.DeploymentDataOnDemand;
import org.springframework.stereotype.Component;

privileged aspect DeploymentDataOnDemand_Roo_DataOnDemand {
    
    declare @type: DeploymentDataOnDemand: @Component;
    
    private Random DeploymentDataOnDemand.rnd = new SecureRandom();
    
    private List<Deployment> DeploymentDataOnDemand.data;
    
    public Deployment DeploymentDataOnDemand.getNewTransientDeployment(int index) {
        Deployment obj = new Deployment();
        setCategory(obj, index);
        setDeploymentTime(obj, index);
        setName(obj, index);
        setProcessEngine(obj, index);
        setUrl(obj, index);
        return obj;
    }
    
    public void DeploymentDataOnDemand.setCategory(Deployment obj, int index) {
        String category = "category_" + index;
        obj.setCategory(category);
    }
    
    public void DeploymentDataOnDemand.setDeploymentTime(Deployment obj, int index) {
        Date deploymentTime = new GregorianCalendar(Calendar.getInstance().get(Calendar.YEAR), Calendar.getInstance().get(Calendar.MONTH), Calendar.getInstance().get(Calendar.DAY_OF_MONTH), Calendar.getInstance().get(Calendar.HOUR_OF_DAY), Calendar.getInstance().get(Calendar.MINUTE), Calendar.getInstance().get(Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setDeploymentTime(deploymentTime);
    }
    
    public void DeploymentDataOnDemand.setName(Deployment obj, int index) {
        String name = "name_" + index;
        obj.setName(name);
    }
    
    public void DeploymentDataOnDemand.setProcessEngine(Deployment obj, int index) {
        ProcessEngine processEngine = null;
        obj.setProcessEngine(processEngine);
    }
    
    public void DeploymentDataOnDemand.setUrl(Deployment obj, int index) {
        String url = "url_" + index;
        obj.setUrl(url);
    }
    
    public Deployment DeploymentDataOnDemand.getSpecificDeployment(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        Deployment obj = data.get(index);
        String id = obj.getId();
        return Deployment.findDeployment(id);
    }
    
    public Deployment DeploymentDataOnDemand.getRandomDeployment() {
        init();
        Deployment obj = data.get(rnd.nextInt(data.size()));
        String id = obj.getId();
        return Deployment.findDeployment(id);
    }
    
    public boolean DeploymentDataOnDemand.modifyDeployment(Deployment obj) {
        return false;
    }
    
    public void DeploymentDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = Deployment.findDeploymentEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'Deployment' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<Deployment>();
        for (int i = 0; i < 10; i++) {
            Deployment obj = getNewTransientDeployment(i);
            try {
                obj.persist();
            } catch (final ConstraintViolationException e) {
                final StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    final ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getRootBean().getClass().getName()).append(".").append(cv.getPropertyPath()).append(": ").append(cv.getMessage()).append(" (invalid value = ").append(cv.getInvalidValue()).append(")").append("]");
                }
                throw new IllegalStateException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
