// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package org.activiti.spring.rest.model;

import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Calendar;
import java.util.Date;
import java.util.GregorianCalendar;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.activiti.engine.ProcessEngine;
import org.activiti.spring.rest.model.Task;
import org.activiti.spring.rest.model.TaskDataOnDemand;
import org.springframework.stereotype.Component;

privileged aspect TaskDataOnDemand_Roo_DataOnDemand {
    
    declare @type: TaskDataOnDemand: @Component;
    
    private Random TaskDataOnDemand.rnd = new SecureRandom();
    
    private List<Task> TaskDataOnDemand.data;
    
    public Task TaskDataOnDemand.getNewTransientTask(int index) {
        Task obj = new Task();
        setAssignee(obj, index);
        setCreateTime(obj, index);
        setDelegateState(obj, index);
        setDeploymentId(obj, index);
        setDescription(obj, index);
        setDueDate(obj, index);
        setFormKey(obj, index);
        setName(obj, index);
        setOwner(obj, index);
        setParentTaskId(obj, index);
        setPriority(obj, index);
        setProcessDefinitionId(obj, index);
        setProcessEngine(obj, index);
        setSuspended(obj, index);
        setTaskDefinitionKey(obj, index);
        return obj;
    }
    
    public void TaskDataOnDemand.setAssignee(Task obj, int index) {
        String assignee = "assignee_" + index;
        obj.setAssignee(assignee);
    }
    
    public void TaskDataOnDemand.setCreateTime(Task obj, int index) {
        Date createTime = new GregorianCalendar(Calendar.getInstance().get(Calendar.YEAR), Calendar.getInstance().get(Calendar.MONTH), Calendar.getInstance().get(Calendar.DAY_OF_MONTH), Calendar.getInstance().get(Calendar.HOUR_OF_DAY), Calendar.getInstance().get(Calendar.MINUTE), Calendar.getInstance().get(Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setCreateTime(createTime);
    }
    
    public void TaskDataOnDemand.setDelegateState(Task obj, int index) {
        String delegateState = "delegateState_" + index;
        obj.setDelegateState(delegateState);
    }
    
    public void TaskDataOnDemand.setDeploymentId(Task obj, int index) {
        String deploymentId = "deploymentId_" + index;
        obj.setDeploymentId(deploymentId);
    }
    
    public void TaskDataOnDemand.setDescription(Task obj, int index) {
        String description = "description_" + index;
        obj.setDescription(description);
    }
    
    public void TaskDataOnDemand.setDueDate(Task obj, int index) {
        Date dueDate = new GregorianCalendar(Calendar.getInstance().get(Calendar.YEAR), Calendar.getInstance().get(Calendar.MONTH), Calendar.getInstance().get(Calendar.DAY_OF_MONTH), Calendar.getInstance().get(Calendar.HOUR_OF_DAY), Calendar.getInstance().get(Calendar.MINUTE), Calendar.getInstance().get(Calendar.SECOND) + new Double(Math.random() * 1000).intValue()).getTime();
        obj.setDueDate(dueDate);
    }
    
    public void TaskDataOnDemand.setFormKey(Task obj, int index) {
        String formKey = "formKey_" + index;
        obj.setFormKey(formKey);
    }
    
    public void TaskDataOnDemand.setName(Task obj, int index) {
        String name = "name_" + index;
        obj.setName(name);
    }
    
    public void TaskDataOnDemand.setOwner(Task obj, int index) {
        String owner = "owner_" + index;
        obj.setOwner(owner);
    }
    
    public void TaskDataOnDemand.setParentTaskId(Task obj, int index) {
        String parentTaskId = "parentTaskId_" + index;
        obj.setParentTaskId(parentTaskId);
    }
    
    public void TaskDataOnDemand.setPriority(Task obj, int index) {
        Integer priority = new Integer(index);
        obj.setPriority(priority);
    }
    
    public void TaskDataOnDemand.setProcessDefinitionId(Task obj, int index) {
        String processDefinitionId = "processDefinitionId_" + index;
        obj.setProcessDefinitionId(processDefinitionId);
    }
    
    public void TaskDataOnDemand.setProcessEngine(Task obj, int index) {
        ProcessEngine processEngine = null;
        obj.setProcessEngine(processEngine);
    }
    
    public void TaskDataOnDemand.setSuspended(Task obj, int index) {
        Boolean suspended = Boolean.TRUE;
        obj.setSuspended(suspended);
    }
    
    public void TaskDataOnDemand.setTaskDefinitionKey(Task obj, int index) {
        String taskDefinitionKey = "taskDefinitionKey_" + index;
        obj.setTaskDefinitionKey(taskDefinitionKey);
    }
    
    public Task TaskDataOnDemand.getSpecificTask(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        Task obj = data.get(index);
        String id = obj.getId();
        return Task.findTask(id);
    }
    
    public Task TaskDataOnDemand.getRandomTask() {
        init();
        Task obj = data.get(rnd.nextInt(data.size()));
        String id = obj.getId();
        return Task.findTask(id);
    }
    
    public boolean TaskDataOnDemand.modifyTask(Task obj) {
        return false;
    }
    
    public void TaskDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = Task.findTaskEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'Task' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<Task>();
        for (int i = 0; i < 10; i++) {
            Task obj = getNewTransientTask(i);
            try {
                obj.persist();
            } catch (final ConstraintViolationException e) {
                final StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    final ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getRootBean().getClass().getName()).append(".").append(cv.getPropertyPath()).append(": ").append(cv.getMessage()).append(" (invalid value = ").append(cv.getInvalidValue()).append(")").append("]");
                }
                throw new IllegalStateException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
