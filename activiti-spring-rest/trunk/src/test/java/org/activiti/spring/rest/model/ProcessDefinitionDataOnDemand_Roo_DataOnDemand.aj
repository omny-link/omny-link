// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package org.activiti.spring.rest.model;

import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.activiti.engine.ProcessEngine;
import org.activiti.spring.rest.model.ProcessDefinition;
import org.activiti.spring.rest.model.ProcessDefinitionDataOnDemand;
import org.springframework.stereotype.Component;

privileged aspect ProcessDefinitionDataOnDemand_Roo_DataOnDemand {
    
    declare @type: ProcessDefinitionDataOnDemand: @Component;
    
    private Random ProcessDefinitionDataOnDemand.rnd = new SecureRandom();
    
    private List<ProcessDefinition> ProcessDefinitionDataOnDemand.data;
    
    public ProcessDefinition ProcessDefinitionDataOnDemand.getNewTransientProcessDefinition(int index) {
        ProcessDefinition obj = new ProcessDefinition();
        setCategory(obj, index);
        setDeploymentId(obj, index);
        setDescription(obj, index);
        setDiagramResourceName(obj, index);
        setFormKey(obj, index);
        setKey(obj, index);
        setName(obj, index);
        setProcessEngine(obj, index);
        setResourceName(obj, index);
        setVersion(obj, index);
        return obj;
    }
    
    public void ProcessDefinitionDataOnDemand.setCategory(ProcessDefinition obj, int index) {
        String category = "category_" + index;
        obj.setCategory(category);
    }
    
    public void ProcessDefinitionDataOnDemand.setDeploymentId(ProcessDefinition obj, int index) {
        Integer deploymentId = new Integer(index);
        obj.setDeploymentId(deploymentId);
    }
    
    public void ProcessDefinitionDataOnDemand.setDescription(ProcessDefinition obj, int index) {
        String description = "description_" + index;
        obj.setDescription(description);
    }
    
    public void ProcessDefinitionDataOnDemand.setDiagramResourceName(ProcessDefinition obj, int index) {
        String diagramResourceName = "diagramResourceName_" + index;
        obj.setDiagramResourceName(diagramResourceName);
    }
    
    public void ProcessDefinitionDataOnDemand.setFormKey(ProcessDefinition obj, int index) {
        String formKey = "formKey_" + index;
        obj.setFormKey(formKey);
    }
    
    public void ProcessDefinitionDataOnDemand.setKey(ProcessDefinition obj, int index) {
        String key = "key_" + index;
        obj.setKey(key);
    }
    
    public void ProcessDefinitionDataOnDemand.setName(ProcessDefinition obj, int index) {
        String name = "name_" + index;
        obj.setName(name);
    }
    
    public void ProcessDefinitionDataOnDemand.setProcessEngine(ProcessDefinition obj, int index) {
        ProcessEngine processEngine = null;
        obj.setProcessEngine(processEngine);
    }
    
    public void ProcessDefinitionDataOnDemand.setResourceName(ProcessDefinition obj, int index) {
        String resourceName = "resourceName_" + index;
        obj.setResourceName(resourceName);
    }
    
    public void ProcessDefinitionDataOnDemand.setVersion(ProcessDefinition obj, int index) {
        Integer version = new Integer(index);
        obj.setVersion(version);
    }
    
    public ProcessDefinition ProcessDefinitionDataOnDemand.getSpecificProcessDefinition(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        ProcessDefinition obj = data.get(index);
        String id = obj.getId();
        return ProcessDefinition.findProcessDefinition(id);
    }
    
    public ProcessDefinition ProcessDefinitionDataOnDemand.getRandomProcessDefinition() {
        init();
        ProcessDefinition obj = data.get(rnd.nextInt(data.size()));
        String id = obj.getId();
        return ProcessDefinition.findProcessDefinition(id);
    }
    
    public boolean ProcessDefinitionDataOnDemand.modifyProcessDefinition(ProcessDefinition obj) {
        return false;
    }
    
    public void ProcessDefinitionDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = ProcessDefinition.findProcessDefinitionEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'ProcessDefinition' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<ProcessDefinition>();
        for (int i = 0; i < 10; i++) {
            ProcessDefinition obj = getNewTransientProcessDefinition(i);
            try {
                obj.persist();
            } catch (final ConstraintViolationException e) {
                final StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    final ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getRootBean().getClass().getName()).append(".").append(cv.getPropertyPath()).append(": ").append(cv.getMessage()).append(" (invalid value = ").append(cv.getInvalidValue()).append(")").append("]");
                }
                throw new IllegalStateException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
