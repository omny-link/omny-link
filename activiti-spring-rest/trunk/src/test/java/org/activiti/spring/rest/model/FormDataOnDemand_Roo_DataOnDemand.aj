// WARNING: DO NOT EDIT THIS FILE. THIS FILE IS MANAGED BY SPRING ROO.
// You may push code into the target .java compilation unit if you wish to edit any member(s).

package org.activiti.spring.rest.model;

import java.security.SecureRandom;
import java.util.ArrayList;
import java.util.Iterator;
import java.util.List;
import java.util.Random;
import javax.validation.ConstraintViolation;
import javax.validation.ConstraintViolationException;
import org.activiti.engine.ProcessEngine;
import org.activiti.spring.rest.model.Form;
import org.activiti.spring.rest.model.FormDataOnDemand;
import org.springframework.stereotype.Component;

privileged aspect FormDataOnDemand_Roo_DataOnDemand {
    
    declare @type: FormDataOnDemand: @Component;
    
    private Random FormDataOnDemand.rnd = new SecureRandom();
    
    private List<Form> FormDataOnDemand.data;
    
    public Form FormDataOnDemand.getNewTransientForm(int index) {
        Form obj = new Form();
        setDeploymentId(obj, index);
        setFormId(obj, index);
        setFormKey(obj, index);
        setFormUrl(obj, index);
        setProcessDefinitionId(obj, index);
        setProcessDefinitionUrl(obj, index);
        setProcessEngine(obj, index);
        return obj;
    }
    
    public void FormDataOnDemand.setDeploymentId(Form obj, int index) {
        String deploymentId = "deploymentId_" + index;
        obj.setDeploymentId(deploymentId);
    }
    
    public void FormDataOnDemand.setFormId(Form obj, int index) {
        String formId = "formId_" + index;
        obj.setFormId(formId);
    }
    
    public void FormDataOnDemand.setFormKey(Form obj, int index) {
        String formKey = "formKey_" + index;
        obj.setFormKey(formKey);
    }
    
    public void FormDataOnDemand.setFormUrl(Form obj, int index) {
        String formUrl = "formUrl_" + index;
        obj.setFormUrl(formUrl);
    }
    
    public void FormDataOnDemand.setProcessDefinitionId(Form obj, int index) {
        String processDefinitionId = "processDefinitionId_" + index;
        obj.setProcessDefinitionId(processDefinitionId);
    }
    
    public void FormDataOnDemand.setProcessDefinitionUrl(Form obj, int index) {
        String processDefinitionUrl = "processDefinitionUrl_" + index;
        obj.setProcessDefinitionUrl(processDefinitionUrl);
    }
    
    public void FormDataOnDemand.setProcessEngine(Form obj, int index) {
        ProcessEngine processEngine = null;
        obj.setProcessEngine(processEngine);
    }
    
    public Form FormDataOnDemand.getSpecificForm(int index) {
        init();
        if (index < 0) {
            index = 0;
        }
        if (index > (data.size() - 1)) {
            index = data.size() - 1;
        }
        Form obj = data.get(index);
        Long id = obj.getId();
        return Form.findForm(id);
    }
    
    public Form FormDataOnDemand.getRandomForm() {
        init();
        Form obj = data.get(rnd.nextInt(data.size()));
        Long id = obj.getId();
        return Form.findForm(id);
    }
    
    public boolean FormDataOnDemand.modifyForm(Form obj) {
        return false;
    }
    
    public void FormDataOnDemand.init() {
        int from = 0;
        int to = 10;
        data = Form.findFormEntries(from, to);
        if (data == null) {
            throw new IllegalStateException("Find entries implementation for 'Form' illegally returned null");
        }
        if (!data.isEmpty()) {
            return;
        }
        
        data = new ArrayList<Form>();
        for (int i = 0; i < 10; i++) {
            Form obj = getNewTransientForm(i);
            try {
                obj.persist();
            } catch (final ConstraintViolationException e) {
                final StringBuilder msg = new StringBuilder();
                for (Iterator<ConstraintViolation<?>> iter = e.getConstraintViolations().iterator(); iter.hasNext();) {
                    final ConstraintViolation<?> cv = iter.next();
                    msg.append("[").append(cv.getRootBean().getClass().getName()).append(".").append(cv.getPropertyPath()).append(": ").append(cv.getMessage()).append(" (invalid value = ").append(cv.getInvalidValue()).append(")").append("]");
                }
                throw new IllegalStateException(msg.toString(), e);
            }
            obj.flush();
            data.add(obj);
        }
    }
    
}
